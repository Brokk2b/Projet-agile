import numpy as np
import math as m
import time

ecam = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0],[0,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0],[0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0],[0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

prepa = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,0],[0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0],
[0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0],[0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0],[0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

P = np.array([[0,0,0,0,0],[0,1,1,1,0],[0,1,0,1,0],[0,1,1,1,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0]])
R = np.array([[0,0,0,0,0],[0,1,1,1,0],[0,1,0,1,0],[0,1,1,0,0],[0,1,0,1,0],[0,1,0,1,0],[0,0,0,0,0]])
E = np.array([[0,0,0,0,0],[0,1,1,1,0],[0,1,0,0,0],[0,1,1,0,0],[0,1,0,0,0],[0,1,1,1,0],[0,0,0,0,0]])
C = np.array([[0,0,0,0,0],[0,1,1,1,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,0,0,0],[0,1,1,1,0],[0,0,0,0,0]])
A = np.array([[0,0,0,0,0],[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0],[0,1,0,1,0],[0,1,0,1,0],[0,0,0,0,0]])
PA = np.array([[0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,1,0,0],[0,1,0,1,0,1,0,1,0],[0,1,1,1,0,1,1,1,0],[0,1,0,0,0,1,0,1,0],[0,1,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0]])
M = np.array([[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,1,0],[0,1,1,0,1,1,0,1,0],[0,1,0,1,0,1,0,1,0],[0,1,0,0,0,1,0,0,0],[0,1,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0]])

tester = np.array([[1,0,1],[0,0,1],[1,0,0]])

def timer():
    start_time = time.time()
    R=test1(prepa,ecam)
    interval = time.time() - start_time  
    print('Total time in seconds:', interval, 'test = ',R)


def count(array):
    l=len(array)
    c=len(array[0])
    C=np.zeros((l,c),int)
    for i in range(l):
        for j in range(c):
            if i==0:
                if j==0:
                    C[i,j]=array[i,j+1]+array[i+1,j+1]+array[i+1,j]
                elif j==c-1:
                    C[i,j]=array[i,j-1]+array[i+1,j-1]+array[i+1,j]
                else:
                    C[i,j]=array[i,j-1]+array[i+1,j-1]+array[i+1,j]+array[i+1,j+1]+array[i,j+1]
            elif i==l-1:
                if j==0:
                    C[i,j]=array[i-1,j]+array[i-1,j+1]+array[i,j+1]
                elif j==c-1:
                    C[i,j]=array[i,j-1]+array[i-1,j-1]+array[i-1,j]
                else:
                    C[i,j]=array[i,j-1]+array[i-1,j-1]+array[i-1,j]+array[i-1,j+1]+array[i,j+1]
            else:
                if j==0:
                    C[i,j]=array[i-1,j]+array[i-1,j+1]+array[i,j+1]+array[i+1,j+1]+array[i+1,j]
                elif j==c-1:
                    C[i,j]=array[i-1,j]+array[i-1,j-1]+array[i,j-1]+array[i+1,j-1]+array[i+1,j]
                else:
                    C[i,j]=array[i-1,j-1]+array[i-1,j]+array[i-1,j+1]+array[i,j-1]+array[i,j+1]+array[i+1,j-1]+array[i+1,j]+array[i+1,j+1]
    return C

def rule(r):
    L=[]
    for i in range(17,-1,-1):
        if r//2**i==1: L=L+[1]
        else: L=L+[0]
        r=r%2**i
    L.reverse()
    return L

def nextstep(array,r):
    l=len(array)
    c=len(array[0])
    C=count(array)
    a=np.copy(array)
    R=np.zeros((l,c),tuple)
    for i in range(l):
        for j in range(c):
            R[(i,j)]=(a[(i,j)],C[(i,j)])
    L=rule(r)
    for i in range(l):
        for j in range(c):
            a[(i,j)]=L[9*R[(i,j)][0]+R[(i,j)][1]]
    return a

def nsteps(array,r,n):
    newarray=np.copy(array)
    for i in range(n):
        newarray=nextstep(newarray,r)
    return newarray

def board(array,b):
    L=[]
    peri=2*(len(array)+len(array[0]))-4
    for i in range(peri-1,-1,-1):
        if b//2**i==1: L=L+[1]
        else: L=L+[0]
        b=b%2**i
    L.reverse()
    a=np.copy(array)
    l=len(a)-1
    c=len(a[0])-1
    k=0
    while k<=c:
        a[0,k]=L[k]
        k+=1
    while k<=c+l:
        a[k-c,c]=L[k]
        k+=1
    while k<=c+l+c:
        a[l,c+l+c-k]=L[k]
        k+=1
    while k<c+l+c+l:
        a[c+l+c+l-k,0]=L[k]
        k+=1
    return(a)

def test1(a1,a2):
    l=len(a1)
    c=len(a1[0])
    L=[]
    for i in range(2**9):
        a=np.copy(a1)
        b=nextstep(a,i)
        if np.array_equal(b[2:l-2,1:c-2],a2[2:l-2,2:c-2])==True:
            L.append((i,1))
        for j in range(10):
            d=nextstep(b,i)
            if np.array_equal(a,b)==True: break
            elif np.array_equal(a,d)==True: break
            elif np.array_equal(d[2:l-2,2:c-2],a2[2:l-2,2:c-2])==True:
                L.append((i,j+2))
            a=np.copy(b)
            b=np.copy(d)
    return L

def test2(a1,a2):
    l=len(a1)
    c=len(a1[0])
    L=[]
    for k in range(2**52):
        v=board(a1,k)
        for i in range(2**18):
            a=np.copy(v)
            b=nextstep(a,i)
            if np.array_equal(b[2:l-2,1:c-2],a2[2:l-2,2:c-2])==True:
                L.append((i,1))
            for j in range(100):
                d=nextstep(b,i)
                if np.array_equal(a,b)==True: break
                elif np.array_equal(a,d)==True: break
                elif np.array_equal(d[2:l-2,2:c-2],a2[2:l-2,2:c-2])==True:
                    L.append((i,j+2))
                a=np.copy(b)
                b=np.copy(d)
    return L

def test3(a1,a2):
    l=len(a1)
    c=len(a1[0])
    L=[]
    for i in range(len(ECAMrules)):
        a=np.copy(a1)
        b=nextstep(a,ECAMrules[i])
        if np.array_equal(b[1:l-1,1:c-1],a2[1:l-1,1:c-1])==True:
            L.append((ECAMrules[i],1))
        for j in range(5):
            d=nextstep(b,ECAMrules[i])
            if np.array_equal(a,b)==True: break
            elif np.array_equal(a,d)==True: break
            elif np.array_equal(d[1:l-1,1:c-1],a2[1:l-1,1:c-1])==True:
                L.append((ECAMrules[i],j+2))
            a=np.copy(b)
            b=np.copy(d)
    return L

def possib(array,r):
    l=len(array)
    c=len(array[0])
    L=rule(r)
    p=len(L)
    P=[[[(2,0) for k in range(p)] for j in range(c)] for i in range(l)]
    for i in range(l):
        for j in range(c):
            if array[i,j]==1:
                k=0
                for a in range(2):
                    for b in range(9):
                        if L[9*a+b]==1:
                            P[i][j][k]=(a,b)
                            k+=1
            else:
                k=0
                for a in range(2):
                    for b in range(9):
                        if L[9*a+b]==0:
                            P[i][j][k]=(a,b)
                            k+=1
    return P

def neighbours(array,a,b):
    l=len(array)-1
    c=len(array[0])-1
    k=0
    if a==0:
        if b==0:
            k=array[0,1]+array[1,1]+array[1,0]
        elif b==c:
            k=array[0,c-1]+array[1,c-1]+array[1,c]
        else:
            k=array[0,b-1]+array[1,b-1]+array[1,b]+array[1,b+1]+array[0,b+1]
    elif a==l:
        if b==0:
            k=array[l-1,0]+array[l-1,1]+array[l,1]
        elif b==c:
            k=array[l,c-1]+array[l-1,c-1]+array[l-1,c]
        else:
            k=array[l,b-1]+array[l-1,b-1]+array[l-1,b]+array[l-1,b+1]+array[l,b+1]
    else:
        if b==0:
            k=array[a-1,0]+array[a-1,1]+array[a,1]+array[a+1,1]+array[a+1,0]
        elif b==c:
            k=array[a-1,c]+array[a-1,c-1]+array[a,c-1]+array[a+1,c-1]+array[a+1,c]
        else:
            k=array[a-1,b-1]+array[a-1,b]+array[a-1,b+1]+array[a,b-1]+array[a,b+1]+array[a+1,b-1]+array[a+1,b]+array[a+1,b+1]
    return k

def check(array,R,r,a,b):
    P=possib(array,r)
    l=len(array)-1
    c=len(array[0])-1
    if a==0:
        if b==0:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k][1]<=3:
                    R[0,0]=P[a][b][k][0]
                    L=[3,3,3]
                    C=int(m.factorial(3)/(m.factorial(P[a][b][k][1])*m.factorial(3-P[a][b][k][1])))
                    for p in range(C):
                        n=0
                        while n!=P[a][b][k][1]:
                            L[n-p]=1
                            n+=1
                        while n!=len(L):
                            L[n-p]=0
                            n+=1
                        R[0,1]=L[0]
                        R[1,1]=L[1]
                        R[1,0]=L[2]
                        z=check(array,R,r,a,b+1)
                        if np.array_equal(z,2*np.ones((l,c),int))==False:
                            return z
                        R[0,1]=2
                        R[1,1]=2
                        R[1,0]=2
                k+=1
        elif b==c:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k]==(R[a,b],neighbours(R,a,b)):
                    z=check(array,R,r,a+1,0)
                    if np.array_equal(z,2*np.ones((l,c),int))==False:
                        return z
                k+=1
        else:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k][0]==R[a,b] and P[a][b][k][1]>=neighbours(R,a,b)-4 and P[a][b][k][1]-(neighbours(R,a,b)-4)<=2:
                    L=[3,3]
                    C=int(m.factorial(2)/(m.factorial(P[a][b][k][1]-(neighbours(R,a,b)-4))*m.factorial(2-(P[a][b][k][1]-(neighbours(R,a,b)-4)))))
                    for p in range(C):
                        n=0
                        while n+neighbours(R,a,b)-4 != P[a][b][k][1]:
                            L[n-p]=1
                            n+=1
                        while n!=2:
                            L[n-p]=0
                            n+=1
                        R[a,b+1]=L[0]
                        R[a+1,b+1]=L[1]
                        z=check(array,R,r,a,b+1)
                        if np.array_equal(z,2*np.ones((l,c),int))==False:
                            return z
                        R[a,b+1]=2
                        R[a+1,b+1]=2
                k+=1
    elif a==l:
        if b==0:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k]==(R[a,b],neighbours(R,a,b)):
                    z=check(array,R,r,a,b+1)
                    if np.array_equal(z,2*np.ones((l,c),int))==False:
                        return z
                k+=1
        elif b==c:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k]==(R[a,b],neighbours(R,a,b)):
                    return R
                k+=1
        else:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k]==(R[a,b],neighbours(R,a,b)):
                    z=check(array,R,r,a,b+1)
                    if np.array_equal(z,2*np.ones((l,c),int))==False:
                        return z
                k+=1
    else:
        if b==0:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k][0]==R[a,b] and P[a][b][k][1]>=neighbours(R,a,b)-4 and P[a][b][k][1]-(neighbours(R,a,b)-4)<=2:
                    L=[3,3]
                    C=int(m.factorial(2)/(m.factorial(P[a][b][k][1]-(neighbours(R,a,b)-4))*m.factorial(2-(P[a][b][k][1]-(neighbours(R,a,b)-4)))))
                    for p in range(C):
                        n=0
                        while n+neighbours(R,a,b)-4 != P[a][b][k][1]:
                            L[n-p]=1
                            n+=1
                        while n!=2:
                            L[n-p]=0
                            n+=1
                        R[a+1,b]=L[0]
                        R[a+1,b+1]=L[1]
                        z=check(array,R,r,a,b+1)
                        if np.array_equal(z,2*np.ones((l,c),int))==False:
                            return z
                        R[a+1,b]=2
                        R[a+1,b+1]=2
                k+=1
        elif b==c:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k]==(R[a,b],neighbours(R,a,b)):
                    z=check(array,R,r,a+1,0)
                    if np.array_equal(z,2*np.ones((l,c),int))==False:
                        return z
                k+=1
        else:
            k=0
            while P[a][b][k][0]!=2 and k<len(P[a][b])-1:
                if P[a][b][k][0]==R[a,b] and P[a][b][k][1]>=neighbours(R,a,b)-2 and P[a][b][k][1]-(neighbours(R,a,b)-2)<=1:
                    if neighbours(R,a,b)-2 == P[a][b][k][1]:
                        R[a+1,b+1]=0
                    else:
                        R[a+1,b+1]=1
                    z=check(array,R,r,a,b+1)
                    if np.array_equal(z,2*np.ones((l,c),int))==False:
                        return z
                    R[a+1,b+1]=2
                k+=1
    return 2*np.ones((l,c),int)
    
def previous(array,r):
    l=len(array)
    c=len(array[0])
    R=2*np.ones((l,c),int)
    return(check(array,R,r,0,0))
    
def rulefinder(a1,a2,a3,a4):
    rules1=[]
    rules2=[]
    rules3=[]
    rules4=[]
    for i in range(2**18):
        if previous(a1,i)[0,0]!=2:
            rules1.append(i)
    for i in range(len(rules1)):
        if previous(a2,rules1[i])[0,0]!=2:
            rules2.append(rules1[i])
    for i in range(len(rules2)):
        if previous(a3,rules2[i])[0,0]!=2:
            rules3.append(rules2[i])
    for i in range(len(rules3)):
        if previous(a4,rules3[i])[0,0]!=2:
            rules4.append(rules3[i])
    return rules4

ECAMrules = [1142, 1270, 1398, 5202, 5203, 5330, 5331, 5458, 5459, 5714, 5715, 5731, 5747, 5842, 5843, 5859, 5875, 5970, 5971, 5987, 6003, 6099, 9302, 9430, 9558, 9686, 13349, 13605, 13843, 13859, 13907, 13923, 13971, 13987, 14035, 14051, 14099, 14115, 14163, 14179, 14227, 14243, 14291, 17430, 17462, 17494, 17526, 17558, 17590, 17622, 17654, 17686, 17718, 17750, 17782, 17814, 17846, 17878, 18485, 18604, 18613, 18668, 18732, 18741, 18860, 18869, 19027, 19091, 19155, 19219, 19283, 19347, 19411, 19530, 19531, 19786, 19787, 19914, 19915, 21586, 21587, 21618, 21619, 21714, 21715, 21746, 21747, 21842, 21843, 21874, 21875, 21963, 21970, 21971, 22083, 22098, 22099, 22115, 22130, 22131, 22211, 22226, 22227, 22243, 22258, 22259, 22339, 22354, 22355, 22371, 22386, 22387, 22467, 22474, 22482, 22483, 25622, 25686, 25750, 25814, 25878, 25942, 26006, 26070, 30291, 30419, 30547, 30675, 33814, 33846, 33878, 33910, 33942, 33974, 34006, 34038, 34070, 34102, 34134, 34166, 34198, 34230, 34262, 34869, 34926, 34988, 34997, 35052, 35053, 35054, 35116, 35117, 35125, 35180, 35181, 35182, 35244, 35245, 35246, 35253, 35411, 35475, 35539, 35564, 35565, 35603, 35628, 35629, 35667, 35692, 35693, 35731, 35756, 35757, 35795, 35850, 35851, 35878, 35882, 35914, 35915, 35942, 35946, 35978, 35979, 36006, 36042, 36043, 36070, 36074, 36106, 36107, 36134, 36138, 36170, 36171, 36198, 36202, 36234, 36235, 36262, 36266, 36298, 36299, 36330, 37419, 37483, 37547, 37611, 37675, 37739, 37803, 37970, 37971, 37995, 38098, 38099, 38226, 38227, 38251, 38347, 38467, 38482, 38483, 38499, 38506, 38515, 38595, 38610, 38611, 38627, 38634, 38643, 38723, 38738, 38739, 38755, 38762, 38771, 38851, 38867, 41515, 41531, 41547, 41563, 41579, 41739, 41755, 41771, 41787, 41803, 41819, 41835, 41995, 42006, 42027, 42059, 42070, 42091, 42134, 42198, 42251, 42262, 42283, 42315, 42326, 42347, 42390, 42454, 42507, 42509, 42539, 42570, 42571, 42573, 42602, 42603, 42605, 42762, 42763, 42765, 42794, 42795, 42826, 42827, 42829, 42858, 42859, 42861, 46611, 46627, 46675, 46691, 46739, 46755, 46803, 46819, 46867, 46883, 46931, 46947, 46995, 47011, 47059, 50198, 50230, 50262, 50294, 50326, 50358, 50390, 50422, 50454, 50486, 50518, 50550, 50582, 50614, 50646, 51253, 51372, 51381, 51436, 51500, 51509, 51628, 51637, 51795, 51859, 51923, 51987, 52051, 52115, 52179, 52234, 52235, 52362, 52363, 52490, 52491, 52618, 52619, 53803, 53867, 53931, 53995, 54059, 54123, 54187, 54354, 54355, 54386, 54387, 54482, 54483, 54514, 54515, 54610, 54611, 54642, 54643, 54738, 54739, 54851, 54866, 54867, 54883, 54898, 54899, 54979, 54994, 54995, 55011, 55026, 55027, 55107, 55122, 55123, 55139, 55154, 55155, 55235, 55242, 55250, 55251, 57899, 57931, 57947, 57963, 58123, 58155, 58187, 58203, 58219, 58379, 58390, 58411, 58443, 58454, 58475, 58518, 58582, 58635, 58646, 58667, 58699, 58710, 58731, 58774, 58838, 58890, 58891, 58923, 58954, 58955, 58957, 58986, 58987, 59146, 59147, 59178, 59179, 59210, 59211, 59213, 59242, 59243, 66646, 66678, 66710, 66742, 66774, 66806, 66902, 66934, 66998, 67030, 67756, 67765, 67820, 67948, 68012, 68021, 68243, 68307, 70187, 70219, 70251, 70315, 70347, 70379, 70443, 70475, 70507, 70571, 70603, 70738, 70739, 70866, 70867, 70994, 70995, 71250, 71251, 71267, 71283, 71378, 71379, 71395, 71411, 71506, 71507, 71523, 71539, 71626, 71635, 74774, 74838, 74902, 74966, 75030, 75094, 75158, 75222, 78885, 79141, 79379, 79395, 79443, 79459, 79507, 79523, 79571, 79587, 79635, 79651, 79699, 79715, 79763, 79779, 79827, 82966, 82998, 83030, 83062, 83094, 83126, 83158, 83190, 83222, 83254, 83286, 83318, 83350, 83382, 83414, 84021, 84140, 84149, 84204, 84268, 84277, 84396, 84405, 84563, 84627, 84691, 84755, 84819, 84883, 84947, 85066, 85067, 85322, 85323, 85450, 85451, 86571, 86635, 86699, 86763, 86827, 86891, 86955, 87122, 87123, 87154, 87155, 87250, 87251, 87282, 87283, 87378, 87379, 87410, 87411, 87506, 87507, 87619, 87634, 87635, 87651, 87666, 87667, 87747, 87762, 87763, 87779, 87794, 87795, 87875, 87890, 87891, 87907, 87922, 87923, 88003, 88010, 88018, 88019, 91158, 91222, 91286, 91350, 91414, 91478, 91542, 91606, 99350, 99382, 99414, 99446, 99478, 99510, 99542, 99574, 99606, 99638, 99670, 99702, 99734, 99766, 99798, 100405, 100462, 100524, 100533, 100588, 100589, 100590, 100652, 100653, 100661, 100716, 100717, 100718, 100780, 100789, 100947, 101011, 101075, 101100, 101101, 101139, 101164, 101165, 101203, 101228, 101229, 101267, 101331, 101386, 101418, 101450, 101451, 101467, 101478, 101482, 101514, 101515, 101546, 101578, 101579, 101606, 101610, 101642, 101674, 101706, 101707, 101723, 101734, 101738, 101802, 101834, 101835, 101866, 101979, 102235, 102923, 102955, 102987, 103019, 103051, 103083, 103115, 103147, 103179, 103211, 103243, 103275, 103307, 103339, 103371, 103506, 103507, 103531, 103634, 103635, 103643, 103762, 103763, 103787, 103883, 103899, 104003, 104018, 104019, 104035, 104042, 104051, 104131, 104146, 104147, 104163, 104170, 104179, 104259, 104274, 104275, 104291, 104298, 104307, 104387, 104394, 104403, 107051, 107067, 107083, 107099, 107115, 107275, 107307, 107323, 107339, 107355, 107371, 107531, 107542, 107563, 107595, 107606, 107627, 107670, 107734, 107787, 107798, 107819, 107851, 107862, 107883, 107926, 107990, 108043, 108045, 108075, 108106, 108107, 108109, 108138, 108139, 108298, 108299, 108301, 108330, 108331, 108362, 108363, 108365, 108394, 108395, 112147, 112163, 112211, 112227, 112275, 112291, 112339, 112355, 112403, 112419, 112467, 112483, 112531, 112547, 112595, 115734, 115766, 115798, 115830, 115862, 115894, 115926, 115958, 115990, 116022, 116054, 116086, 116118, 116150, 116182, 116789, 116908, 116917, 116972, 117036, 117045, 117164, 117173, 117331, 117395, 117459, 117523, 117587, 117651, 117715, 119339, 119403, 119467, 119531, 119595, 119659, 119723, 119890, 119891, 119922, 119923, 120018, 120019, 120050, 120051, 120146, 120147, 120178, 120179, 120274, 120275, 120387, 120402, 120403, 120419, 120434, 120435, 120515, 120530, 120531, 120547, 120562, 120563, 120643, 120658, 120659, 120675, 120690, 120691, 120778, 120786, 120787, 123435, 123467, 123483, 123499, 123659, 123691, 123723, 123739, 123755, 123915, 123926, 123947, 123979, 123990, 124011, 124054, 124118, 124171, 124182, 124203, 124235, 124246, 124267, 124310, 124374, 124426, 124427, 124459, 124490, 124491, 124493, 124522, 124523, 124682, 124683, 124714, 124715, 124746, 124747, 124749, 124778, 124779, 132214, 132342, 132470, 133356, 133484, 135723, 135755, 135787, 135851, 135883, 135915, 135979, 136011, 136043, 136107, 136139, 136274, 136275, 136402, 136403, 136530, 136531, 136786, 136787, 136819, 136914, 136915, 136931, 136947, 137042, 137043, 137059, 137075, 137171, 140374, 140502, 140630, 140758, 144421, 144677, 144915, 144931, 144979, 144995, 145043, 145059, 145107, 145123, 145171, 145187, 145235, 145251, 145299, 145315, 145363, 148502, 148534, 148566, 148598, 148630, 148662, 148694, 148726, 148758, 148790, 148822, 148854, 148886, 148918, 148950, 149557, 149676, 149685, 149740, 149804, 149813, 149932, 149941, 150099, 150163, 150227, 150291, 150355, 150419, 150483, 150602, 150603, 150858, 150859, 150986, 150987, 152107, 152171, 152235, 152299, 152363, 152427, 152491, 152658, 152659, 152786, 152787, 152914, 152915, 153035, 153155, 153170, 153171, 153187, 153203, 153283, 153298, 153299, 153315, 153331, 153411, 153426, 153427, 153443, 153459, 153539, 153546, 153555, 156694, 156758, 156822, 156886, 156950, 157014, 157078, 157142, 161363, 161491, 161619, 161747, 164886, 164918, 164950, 164982, 165014, 165046, 165078, 165110, 165142, 165174, 165206, 165238, 165270, 165302, 165334, 165941, 165998, 166060, 166069, 166124, 166125, 166126, 166188, 166189, 166190, 166197, 166252, 166253, 166254, 166316, 166317, 166318, 166325, 166483, 166547, 166611, 166636, 166637, 166675, 166700, 166701, 166739, 166764, 166765, 166803, 166828, 166829, 166867, 166922, 166923, 166950, 166954, 166986, 166987, 167014, 167018, 167050, 167051, 167078, 167114, 167115, 167142, 167146, 167178, 167179, 167206, 167210, 167242, 167243, 167270, 167274, 167306, 167307, 167334, 167338, 167370, 167371, 167398, 167402, 167546, 167802, 168459, 168491, 168523, 168555, 168587, 168619, 168651, 168683, 168715, 168747, 168779, 168811, 168843, 168875, 168907, 169042, 169043, 169170, 169171, 169298, 169299, 169414, 169419, 169539, 169554, 169555, 169571, 169587, 169667, 169682, 169683, 169699, 169715, 169795, 169810, 169811, 169827, 169843, 169923, 169939, 172587, 172603, 172619, 172635, 172651, 172811, 172827, 172843, 172859, 172875, 172891, 172907, 173067, 173078, 173099, 173131, 173142, 173163, 173206, 173270, 173323, 173334, 173355, 173387, 173398, 173419, 173462, 173526, 173579, 173581, 173611, 173642, 173643, 173645, 173674, 173675, 173834, 173835, 173837, 173866, 173867, 173898, 173899, 173901, 173930, 173931, 177683, 177699, 177747, 177763, 177811, 177827, 177875, 177891, 177939, 177955, 178003, 178019, 178067, 178083, 178131, 181270, 181302, 181334, 181366, 181398, 181430, 181462, 181494, 181526, 181558, 181590, 181622, 181654, 181686, 181718, 182325, 182444, 182453, 182508, 182572, 182581, 182700, 182709, 182867, 182931, 182995, 183059, 183123, 183187, 183251, 183306, 183307, 183338, 183434, 183435, 183466, 183562, 183563, 183594, 183690, 183691, 184875, 184939, 185003, 185067, 185131, 185195, 185259, 185426, 185427, 185554, 185555, 185682, 185683, 185923, 185938, 185939, 185955, 185971, 186051, 186066, 186067, 186083, 186099, 186179, 186194, 186195, 186211, 186227, 186307, 186314, 186323, 188971, 189003, 189019, 189035, 189195, 189227, 189259, 189275, 189291, 189451, 189462, 189483, 189515, 189526, 189547, 189590, 189654, 189707, 189718, 189739, 189771, 189782, 189803, 189846, 189910, 189962, 189963, 189995, 190026, 190027, 190029, 190058, 190059, 190218, 190219, 190250, 190251, 190282, 190283, 190285, 190314, 190315, 197750, 197782, 197814, 197846, 197878, 198006, 198038, 198070, 198102, 198828, 198837, 198892, 199020, 199084, 199093, 199315, 199379, 199404, 199571, 199635, 199882, 199883, 199914, 200138, 200139, 201259, 201291, 201323, 201387, 201419, 201451, 201515, 201547, 201579, 201643, 201675, 201810, 201811, 201938, 201939, 202066, 202067, 202322, 202323, 202339, 202355, 202450, 202451, 202467, 202483, 202578, 202579, 202595, 202611, 202698, 202707, 205846, 205910, 205974, 206038, 206102, 206166, 206230, 206294, 209957, 210213, 210451, 210467, 210515, 210531, 210579, 210595, 210643, 210659, 210707, 210723, 210771, 210787, 210835, 210851, 210899, 214038, 214070, 214102, 214134, 214166, 214198, 214230, 214262, 214294, 214326, 214358, 214390, 214422, 214454, 214486, 215093, 215212, 215221, 215276, 215340, 215349, 215468, 215477, 215635, 215699, 215763, 215827, 215891, 215955, 216019, 216138, 216139, 216394, 216395, 216522, 216523, 217643, 217707, 217771, 217835, 217899, 217963, 218027, 218194, 218195, 218322, 218323, 218450, 218451, 218691, 218706, 218707, 218723, 218739, 218819, 218834, 218835, 218851, 218867, 218947, 218962, 218963, 218979, 218995, 219075, 219082, 219091, 222230, 222294, 222358, 222422, 222486, 222550, 222614, 222678, 230486, 230518, 230550, 230582, 230614, 230646, 230710, 230742, 230774, 230806, 230838, 230870, 231477, 231534, 231596, 231605, 231660, 231661, 231662, 231724, 231733, 231788, 231789, 231790, 231852, 231861, 232019, 232147, 232172, 232173, 232211, 232275, 232300, 232301, 232403, 232490, 232522, 232523, 232550, 232554, 232714, 232746, 232778, 232779, 232806, 232810, 234027, 234091, 234155, 234219, 234283, 234347, 234411, 234578, 234579, 234706, 234707, 234715, 234834, 234835, 234955, 234971, 235075, 235090, 235091, 235107, 235123, 235203, 235218, 235219, 235235, 235251, 235331, 235346, 235347, 235363, 235379, 235459, 235466, 235475, 238614, 238678, 238742, 238806, 238870, 238934, 238998, 239062, 241687, 241751, 241943, 242007, 243219, 243235, 243283, 243299, 243347, 243363, 243411, 243427, 243475, 243491, 243539, 243555, 243603, 243619, 243667, 248403, 248467, 248531, 248595, 248659, 248723, 248787, 250411, 250475, 250539, 250603, 250667, 250731, 250795, 250962, 250963, 251090, 251091, 251218, 251219, 251459, 251474, 251475, 251491, 251507, 251587, 251602, 251603, 251619, 251635, 251715, 251730, 251731, 251747, 251763, 251850, 251859, 255050, 255082, 255114, 255146, 255178, 255210, 255242, 255274, 255306, 255338, 255370, 255402, 255434, 255466] 

def tester():
    L=[]
    for i in range(2**8,2**9):
        T=test3(board(PA,i),M)
        if len(T)>=1:
            for j in range(len(T)):
                L.append((i,T[j][0],T[j][1]))
    return L

PE100 = [(21618, 29), (36731, 81), (68243, 30), (107819, 91), (108394, 17), (112227, 53), (145363, 67), (190315, 41)]
RC100 = [(35565, 29), (123755, 94), (124749, 46), (124778, 19), (124778, 22), (124779, 19), (124779, 22), (189195, 68)]

PiE11 = [5, 7, 11, 17, 23, 26, 27, 29, 30, 52, 55, 58, 62, 63, 72, 96, 104, 107, 116, 132, 133, 134, 139, 140, 142, 144, 145, 146, 148, 153, 157, 169, 177, 180, 188, 190, 205, 218, 224, 228, 229, 230, 232, 237, 239, 248, 257, 261, 273, 283, 292, 293, 295, 297, 308, 310, 311, 314, 323, 326, 327, 337, 343, 346, 352, 353, 357, 359, 362, 367, 371, 375, 379, 383, 398, 404, 405, 423, 428, 430, 434, 435, 439, 443, 445, 446, 451, 466, 473, 487, 496, 501, 502, 508, 510, 513, 515, 525, 528, 542, 544, 545, 552, 555, 562, 565, 569, 574, 578, 582, 591, 603, 615, 616, 620, 622, 623, 624, 644, 646, 655, 656, 671, 677, 683, 685, 694, 701, 703, 704, 710, 717, 719, 735, 747, 750, 751, 772, 773, 774, 788, 789, 790, 792, 797, 802, 803, 810, 824, 827, 831, 846, 847, 859, 861, 889, 897, 904, 912, 918, 922, 923, 929, 935, 938, 943, 946, 958, 962, 971, 983, 990, 997, 999, 1007, 1008, 1011, 1013, 1015, 1021]

PiE6 = [(7, 242007, 2), (11, 41515, 2), (11, 41579, 2), (11, 107051, 2), (11, 107115, 2), (11, 172587, 2), (11, 172651, 2), (26, 41515, 2), (26, 41579, 2), (26, 107051, 2), (26, 107115, 2), (26, 172587, 2), (26, 172651, 2), (29, 58187, 5), (29, 189259, 5), (30, 42059, 5), (30, 173131, 5), (116, 101203, 5), (116, 232275, 5), (134, 67948, 4), (134, 133484, 4), (134, 199020, 4), (144, 58986, 2), (144, 124522, 2), (144, 190058, 2), (144, 255082, 2), (144, 255210, 2), (145, 255210, 2), (146, 54355, 4), (146, 54867, 4), (146, 119891, 4), (146, 120403, 4), (146, 185427, 4), (146, 185939, 4), (146, 250963, 4), (146, 251475, 4), (180, 101467, 3), (261, 166124, 6), (261, 166636, 6), (295, 88019, 6), (295, 189275, 5), (295, 219091, 6), (297, 120387, 6), (297, 120515, 6), (323, 53803, 6), (326, 169555, 6), (343, 42573, 5), (343, 108109, 5), (343, 173645, 5), (353, 123926, 5), (362, 123926, 5), (371, 58390, 3), (371, 189462, 3), (375, 58390, 3), (375, 189462, 3), (423, 123926, 5), (443, 123926, 6), (451, 87763, 6), (451, 218835, 6), (487, 21875, 4), (496, 58454, 4), (501, 22131, 5), (501, 153203, 5), (502, 87666, 6), (565, 101979, 3), (569, 30547, 4), (578, 54866, 4), (578, 54867, 4), (578, 120402, 4), (578, 120403, 4), (578, 185938, 4), (578, 185939, 4), (578, 251474, 4), (578, 251475, 4), (582, 67948, 4), (582, 133484, 4), (582, 199020, 4), (591, 242007, 3), (615, 189275, 5), (620, 101979, 3), (624, 103787, 4), (646, 42859, 4), (646, 108395, 4), (646, 173931, 4), (677, 22131, 5), (677, 152427, 3), (677, 153203, 5), (701, 9558, 3), (701, 9686, 3), (701, 75030, 3), (701, 75094, 3), (701, 75158, 3), (701, 75222, 3), (701, 140630, 3), (701, 140758, 3), (701, 206102, 3), (701, 206166, 3), (701, 206230, 3), (701, 206294, 3), (703, 123926, 3), (703, 124054, 3), (704, 84204, 6), (704, 215276, 6), (719, 189451, 4), (735, 123926, 5), (751, 22130, 5), (751, 22258, 5), (772, 46691, 3), (772, 46819, 3), (772, 112227, 3), (772, 112355, 3), (772, 177763, 3), (772, 177891, 3), (772, 243299, 3), (772, 243427, 3), (773, 46691, 3), (773, 46819, 3), (773, 112227, 3), (773, 112355, 3), (773, 177763, 3), (773, 177891, 3), (773, 243299, 3), (773, 243427, 3), (788, 46691, 3), (788, 46819, 3), (788, 112227, 3), (788, 112355, 3), (788, 177763, 3), (788, 177891, 3), (788, 243299, 3), (788, 243427, 3), (789, 46691, 3), (789, 46819, 3), (789, 112227, 3), (789, 112355, 3), (789, 177763, 3), (789, 177891, 3), (789, 243299, 3), (789, 243427, 3), (790, 54866, 6), (790, 54867, 6), (790, 120402, 6), (790, 120403, 6), (792, 107606, 6), (792, 238678, 6), (797, 219082, 6), (803, 42602, 5), (803, 108138, 5), (803, 173674, 5), (827, 5202, 3), (827, 5203, 3), (827, 5330, 3), (827, 5331, 3), (827, 70738, 3), (827, 70739, 3), (827, 70866, 3), (827, 70867, 3), (827, 136274, 3), (827, 136275, 3), (827, 136402, 3), (827, 136403, 3), (827, 201810, 3), (827, 201811, 3), (827, 201938, 3), (827, 201939, 3), (831, 71250, 3), (831, 71251, 3), (831, 71378, 3), (831, 71379, 3), (831, 202322, 3), (831, 202323, 3), (831, 202450, 3), (831, 202451, 3), (859, 38610, 4), (859, 38611, 4), (859, 104146, 4), (859, 104147, 4), (859, 169682, 4), (859, 169683, 4), (859, 235218, 4), (859, 235219, 4), (889, 153203, 5), (897, 58203, 4), (897, 189275, 4), (912, 41835, 2), (912, 107371, 2), (912, 172907, 2), (923, 119659, 2), (923, 250731, 2), (935, 42861, 2), (943, 87379, 6), (943, 87891, 6), (958, 166126, 4), (971, 42326, 6), (971, 42454, 6), (971, 107862, 6), (971, 107990, 6), (971, 173398, 6), (971, 173526, 6), (971, 238934, 6), (971, 239062, 6), (983, 116972, 6), (990, 35054, 4), (990, 166126, 4), (999, 58390, 4), (999, 58518, 4), (999, 189462, 4), (999, 189590, 4), (1008, 123926, 5), (1011, 58390, 4), (1011, 189462, 4), (1015, 58390, 4), (1015, 123990, 6), (1015, 189462, 4), (1021, 189019, 6)] 

EiA6 = [(42, 21971, 5), (90, 120778, 4), (90, 251850, 4), (130, 51381, 6), (130, 51637, 6), (130, 116917, 6), (130, 117173, 6), (130, 182453, 6), (130, 182709, 6), (135, 87794, 3), (135, 87795, 3), (223, 183594, 3), (226, 57947, 5), (226, 58203, 5), (226, 189019, 5), (226, 189275, 5), (245, 58987, 6), (255, 53995, 2), (255, 185067, 2), (268, 58390, 4), (268, 58646, 4), (268, 123926, 4), (268, 124182, 4), (268, 189462, 4), (268, 189718, 4), (281, 58390, 4), (281, 58646, 4), (281, 123926, 4), (281, 124182, 4), (281, 189462, 4), (281, 189718, 4), (283, 66774, 6), (283, 197846, 6), (287, 66774, 6), (287, 197846, 6), (314, 101451, 6), (314, 101707, 6), (328, 22258, 6), (328, 22259, 6), (341, 183594, 5), (341, 183594, 6), (381, 190058, 4), (381, 190059, 4), (381, 190314, 4), (381, 190315, 4), (388, 58987, 6), (388, 190059, 6), (509, 87794, 5), (509, 87795, 5), (509, 124714, 6), (509, 124715, 6), (509, 218867, 5), (510, 58923, 6), (510, 124714, 6), (510, 124715, 6), (510, 189995, 6), (578, 83062, 2), (578, 83318, 2), (578, 115830, 2), (578, 116086, 2), (578, 214134, 2), (578, 214390, 2), (579, 83062, 2), (579, 83318, 2), (579, 115830, 2), (579, 116086, 2), (579, 214134, 2), (579, 214390, 2), (586, 100405, 3), (586, 100661, 3), (586, 231477, 3), (586, 231733, 3), (589, 35246, 3), (589, 166318, 3), (597, 35246, 3), (597, 166318, 3), (608, 79507, 6), (608, 79763, 6), (608, 210579, 6), (608, 210835, 6), (645, 84021, 6), (645, 84277, 6), (645, 215093, 6), (645, 215349, 6), (656, 54515, 6), (700, 50198, 6), (700, 50326, 6), (700, 50454, 6), (700, 50582, 6), (715, 104170, 2), (780, 41563, 3), (780, 41819, 3), (780, 107099, 3), (780, 107355, 3), (780, 172635, 3), (780, 172891, 3), (793, 50294, 4), (793, 50422, 4), (793, 50550, 4), (793, 181366, 4), (793, 181494, 4), (793, 181622, 4), (797, 189019, 3), (799, 189019, 3), (807, 35117, 6), (807, 100653, 6), (807, 166189, 6), (826, 167802, 6), (845, 58390, 6), (845, 58518, 6), (845, 58646, 6), (845, 58774, 6), (845, 189462, 6), (845, 189590, 6), (845, 189718, 6), (845, 189846, 6), (902, 119531, 3), (920, 119403, 3), (920, 119531, 3), (928, 38634, 5), (930, 119403, 3), (930, 119659, 3), (989, 112147, 6), (989, 112403, 6), (989, 243219, 6), (989, 243475, 6)] 

RiC6 = [(7, 58518, 5), (7, 58774, 5), (30, 13349, 6), (30, 13605, 6), (30, 144421, 6), (30, 144677, 6), (49, 25686, 4), (49, 25942, 4), (49, 156758, 4), (49, 157014, 4), (68, 58475, 6), (68, 58731, 6), (68, 120402, 4), (68, 120403, 4), (68, 120658, 4), (68, 120659, 4), (68, 251474, 4), (68, 251475, 4), (68, 251730, 4), (68, 251731, 4), (71, 58475, 6), (71, 58731, 6), (74, 35411, 6), (74, 35667, 6), (77, 124011, 6), (77, 124267, 6), (94, 152299, 3), (97, 35411, 6), (97, 35667, 6), (97, 50198, 2), (97, 50454, 2), (97, 115734, 2), (97, 115990, 2), (97, 181270, 2), (97, 181526, 2), (98, 35411, 6), (98, 35667, 6), (100, 35411, 6), (100, 35667, 6), (105, 35411, 6), (105, 35667, 6), (111, 58475, 6), (111, 58731, 6), (118, 124374, 6), (126, 35411, 6), (126, 35667, 6), (132, 17558, 2), (132, 17814, 2), (132, 50326, 2), (132, 50582, 2), (132, 83094, 2), (132, 83350, 2), (132, 115862, 2), (132, 116118, 2), (132, 148630, 2), (132, 148886, 2), (132, 181398, 2), (132, 181654, 2), (132, 214166, 2), (132, 214422, 2), (138, 17558, 2), (138, 17814, 2), (138, 83094, 2), (138, 83350, 2), (138, 148630, 2), (138, 148886, 2), (138, 214166, 2), (138, 214422, 2), (145, 17558, 2), (145, 17814, 2), (145, 50326, 2), (145, 50582, 2), (145, 83094, 2), (145, 83350, 2), (145, 115862, 2), (145, 116118, 2), (145, 148630, 2), (145, 148886, 2), (145, 181398, 2), (145, 181654, 2), (145, 214166, 2), (145, 214422, 2), (147, 25622, 2), (147, 25878, 2), (147, 58390, 2), (147, 58646, 2), (147, 91158, 2), (147, 91414, 2), (147, 123926, 2), (147, 124182, 2), (147, 156694, 2), (147, 156950, 2), (147, 189462, 2), (147, 189718, 2), (147, 222230, 2), (147, 222486, 2), (151, 13349, 3), (151, 13605, 3), (151, 78885, 3), (151, 79141, 3), (151, 144421, 3), (151, 144677, 3), (151, 209957, 3), (151, 210213, 3), (159, 124118, 6), (160, 18668, 6), (160, 149740, 6), (161, 17558, 2), (161, 17814, 2), (161, 50326, 2), (161, 50582, 2), (161, 83094, 2), (161, 83350, 2), (161, 115862, 2), (161, 116118, 2), (161, 148630, 2), (161, 148886, 2), (161, 181398, 2), (161, 181654, 2), (161, 214166, 2), (161, 214422, 2), (164, 34198, 3), (164, 34230, 3), (164, 99734, 3), (164, 99766, 3), (164, 165270, 3), (164, 165302, 3), (164, 230806, 3), (164, 230838, 3), (166, 17430, 2), (166, 17686, 2), (166, 82966, 2), (166, 83222, 2), (166, 148502, 2), (166, 148758, 2), (166, 214038, 2), (166, 214294, 2), (170, 17430, 2), (170, 17686, 2), (170, 82966, 2), (170, 83222, 2), (170, 148502, 2), (170, 148758, 2), (170, 214038, 2), (170, 214294, 2), (171, 17430, 2), (171, 17686, 2), (171, 82966, 2), (171, 83222, 2), (171, 148502, 2), (171, 148758, 2), (171, 214038, 2), (171, 214294, 2), (180, 79443, 6), (180, 79699, 6), (180, 210515, 6), (180, 210771, 6), (190, 57963, 6), (190, 58219, 6), (195, 103083, 6), (195, 103339, 6), (195, 234155, 6), (195, 234411, 6), (196, 33974, 3), (196, 34230, 3), (207, 86635, 5), (207, 86891, 5), (207, 217707, 5), (207, 217963, 5), (271, 35245, 4), (271, 166317, 4), (278, 46803, 5), (284, 58957, 2), (284, 59213, 2), (284, 124493, 2), (284, 124749, 2), (284, 190029, 2), (284, 190285, 2), (285, 58957, 2), (285, 59213, 2), (285, 124493, 2), (285, 124749, 2), (285, 190029, 2), (285, 190285, 2), (286, 124493, 2), (286, 124749, 2), (287, 124493, 2), (287, 124749, 2), (290, 38515, 5), (290, 38771, 5), (290, 104051, 5), (290, 104307, 5), (290, 169587, 5), (290, 169843, 5), (290, 235123, 5), (290, 235379, 5), (307, 124310, 6), (321, 13349, 6), (321, 78885, 6), (321, 144421, 6), (321, 209957, 6), (324, 59242, 5), (324, 190314, 5), (341, 58454, 4), (357, 17430, 4), (357, 17686, 4), (357, 50198, 4), (357, 50454, 4), (357, 82966, 4), (357, 83222, 4), (357, 115734, 4), (357, 115990, 4), (357, 148502, 4), (357, 148758, 4), (357, 181270, 4), (357, 181526, 4), (357, 214038, 4), (357, 214294, 4), (377, 103883, 5), (377, 234955, 5), (406, 42134, 3), (406, 42390, 3), (406, 173206, 3), (406, 173462, 3), (411, 74902, 3), (411, 75158, 3), (411, 205974, 3), (411, 206230, 3), (425, 58731, 3), (425, 59242, 3), (425, 59243, 3), (426, 58475, 3), (426, 58731, 3), (426, 58986, 3), (426, 58987, 3), (426, 59242, 3), (426, 59243, 3), (427, 58475, 3), (427, 58986, 3), (427, 58987, 3), (436, 58475, 3), (436, 58731, 3), (436, 58986, 3), (436, 58987, 3), (436, 59242, 3), (436, 59243, 3), (438, 58475, 3), (438, 58986, 3), (438, 58987, 3), (448, 42539, 6), (448, 42795, 6), (448, 173611, 6), (448, 173867, 6), (465, 42602, 5), (465, 42858, 5), (465, 108138, 5), (465, 108394, 5), (465, 173674, 5), (465, 173930, 5), (470, 18485, 3), (470, 18741, 3), (470, 84021, 3), (470, 84277, 3), (470, 149557, 3), (470, 149813, 3), (470, 215093, 3), (470, 215349, 3), (474, 123483, 5), (474, 123739, 5), (482, 124246, 6), (488, 54994, 6), (488, 55250, 6), (488, 186066, 6), (490, 123739, 5), (525, 21618, 4), (525, 21874, 4), (532, 120050, 4), (532, 120562, 4), (535, 58390, 3), (535, 58646, 3), (535, 123926, 3), (535, 124182, 3), (535, 189462, 3), (535, 189718, 3), (539, 58986, 6), (539, 59242, 6), (540, 58454, 4), (540, 58710, 4), (547, 25622, 2), (547, 25878, 2), (547, 58390, 2), (547, 58646, 2), (547, 91158, 2), (547, 91414, 2), (547, 123926, 2), (547, 124182, 2), (547, 156694, 2), (547, 156950, 2), (547, 189462, 2), (547, 189718, 2), (547, 222230, 2), (547, 222486, 2), (584, 35411, 6), (584, 35667, 6), (609, 124310, 6), (671, 58838, 3), (671, 124118, 6), (699, 57947, 4), (700, 124374, 6), (704, 53995, 4), (704, 185067, 4), (706, 107051, 5), (706, 107307, 5), (718, 30291, 6), (718, 161363, 6), (728, 101228, 5), (728, 232300, 5), (737, 30419, 4), (737, 30419, 5), (737, 30675, 4), (737, 30675, 5), (738, 21618, 6), (738, 21874, 6), (740, 166318, 6), (754, 166318, 6), (757, 25750, 5), (757, 26006, 5), (757, 91286, 5), (757, 91542, 5), (757, 156822, 5), (757, 157078, 5), (757, 222358, 5), (757, 222614, 5), (763, 120178, 5), (763, 120690, 5), (768, 58774, 5), (771, 57947, 4), (771, 58203, 4), (850, 21874, 6), (850, 22386, 6), (850, 54642, 6), (850, 55154, 6), (869, 17430, 4), (869, 17686, 4), (869, 50198, 4), (869, 50454, 4), (869, 82966, 4), (869, 83222, 4), (869, 115734, 4), (869, 115990, 4), (869, 148502, 4), (869, 148758, 4), (869, 181270, 4), (869, 181526, 4), (869, 214038, 4), (869, 214294, 4), (878, 104147, 6), (878, 235219, 6), (884, 35411, 4), (884, 35667, 4), (884, 100947, 4), (884, 101203, 4), (886, 104147, 6), (886, 235219, 6), (894, 35117, 2), (894, 166189, 2), (895, 35117, 2), (895, 166189, 2), (909, 124778, 6), (926, 54514, 5), (926, 55026, 5), (929, 13843, 1), (929, 14099, 1), (929, 46611, 1), (929, 46867, 1), (929, 79379, 1), (929, 79635, 1), (929, 112147, 1), (929, 112403, 1), (929, 144915, 1), (929, 145171, 1), (929, 177683, 1), (929, 177939, 1), (929, 210451, 1), (929, 210707, 1), (929, 243219, 1), (929, 243475, 1), (933, 58986, 6), (933, 59242, 6), (933, 190058, 6), (933, 190314, 6), (934, 46611, 1), (934, 46867, 1), (934, 112147, 1), (934, 112403, 1), (934, 177683, 1), (934, 177939, 1), (934, 243219, 1), (934, 243475, 1), (938, 46611, 1), (938, 46867, 1), (938, 112147, 1), (938, 112403, 1), (938, 177683, 1), (938, 177939, 1), (938, 243219, 1), (938, 243475, 1), (939, 46611, 1), (939, 46867, 1), (939, 112147, 1), (939, 112403, 1), (939, 177683, 1), (939, 177939, 1), (939, 243219, 1), (939, 243475, 1), (941, 57899, 5), (941, 188971, 5), (945, 13843, 1), (945, 14099, 1), (945, 46611, 1), (945, 46867, 1), (945, 79379, 1), (945, 79635, 1), (945, 112147, 1), (945, 112403, 1), (945, 144915, 1), (945, 145171, 1), (945, 177683, 1), (945, 177939, 1), (945, 210451, 1), (945, 210707, 1), (945, 243219, 1), (945, 243475, 1), (948, 35116, 2), (948, 35117, 2), (948, 100652, 2), (948, 100653, 2), (948, 166188, 2), (948, 166189, 2), (948, 231724, 2), (954, 120050, 6), (954, 120562, 6), (956, 46611, 1), (956, 46867, 1), (956, 112147, 1), (956, 112403, 1), (956, 177683, 1), (956, 177939, 1), (956, 243219, 1), (956, 243475, 1), (957, 46611, 1), (957, 46867, 1), (957, 112147, 1), (957, 112403, 1), (957, 177683, 1), (957, 177939, 1), (957, 243219, 1), (957, 243475, 1), (958, 112147, 1), (958, 112403, 1), (958, 243219, 1), (958, 243475, 1), (961, 13843, 1), (961, 14099, 1), (961, 46611, 1), (961, 46867, 1), (961, 79379, 1), (961, 79635, 1), (961, 112147, 1), (961, 112403, 1), (961, 144915, 1), (961, 145171, 1), (961, 161491, 3), (961, 177683, 1), (961, 177939, 1), (961, 210451, 1), (961, 210707, 1), (961, 243219, 1), (961, 243475, 1), (964, 35116, 2), (964, 35628, 2), (964, 100652, 2), (964, 101164, 2), (964, 166188, 2), (964, 166700, 2), (964, 231724, 2), (966, 46611, 1), (966, 46867, 1), (966, 112147, 1), (966, 112403, 1), (966, 177683, 1), (966, 177939, 1), (966, 243219, 1), (966, 243475, 1), (969, 35116, 2), (969, 35628, 2), (969, 100652, 2), (969, 101164, 2), (969, 166188, 2), (969, 166190, 2), (969, 166700, 2), (969, 231724, 2), (970, 46611, 1), (970, 46867, 1), (970, 112147, 1), (970, 112403, 1), (970, 177683, 1), (970, 177939, 1), (970, 243219, 1), (970, 243475, 1), (971, 46611, 1), (971, 46867, 1), (971, 112147, 1), (971, 112403, 1), (971, 177683, 1), (971, 177939, 1), (971, 243219, 1), (971, 243475, 1), (973, 25622, 5), (973, 25878, 5), (973, 91158, 5), (973, 91414, 5), (973, 156694, 5), (973, 156950, 5), (973, 222230, 5), (973, 222486, 5), (975, 101164, 2), (977, 13843, 1), (977, 14099, 1), (977, 21618, 5), (977, 21874, 5), (977, 22130, 5), (977, 22386, 5), (977, 46611, 1), (977, 46867, 1), (977, 79379, 1), (977, 79635, 1), (977, 112147, 1), (977, 112403, 1), (977, 144915, 1), (977, 145171, 1), (977, 177683, 1), (977, 177939, 1), (977, 210451, 1), (977, 210707, 1), (977, 243219, 1), (977, 243475, 1), (979, 166190, 2), (987, 124778, 6), (988, 46611, 1), (988, 46867, 1), (988, 112147, 1), (988, 112403, 1), (988, 177683, 1), (988, 177939, 1), (988, 243219, 1), (988, 243475, 1), (989, 46611, 1), (989, 46867, 1), (989, 112147, 1), (989, 112403, 1), (989, 177683, 1), (989, 177939, 1), (989, 243219, 1), (989, 243475, 1), (990, 112147, 1), (990, 112403, 1), (990, 243219, 1), (990, 243475, 1), (993, 13843, 1), (993, 14099, 1), (993, 79379, 1), (993, 79635, 1), (993, 144915, 1), (993, 145171, 1), (993, 210451, 1), (993, 210707, 1), (994, 124778, 5), (995, 35116, 2), (995, 100652, 2), (995, 144931, 4), (995, 145187, 4), (995, 166188, 2), (995, 231724, 2), (996, 35116, 2), (996, 100652, 2), (996, 166188, 2), (996, 231724, 2), (1000, 124778, 5), (1001, 35116, 2), (1001, 100652, 2), (1001, 166188, 2), (1001, 231724, 2), (1010, 124778, 6), (1016, 54354, 4), (1016, 54355, 4), (1016, 54610, 4), (1016, 54611, 4), (1022, 79379, 1), (1022, 79635, 1), (1022, 210451, 1), (1022, 210707, 1)] 

def recoupeur(a1,a2,a3):
    R=[]
    for i in range(len(a1)):
        for j in range(len(a2)):
            for k in range(len(a3)):
                if a1[i][1]==a2[j][1]==a3[k][1]:
                    R.append((a1[i],a2[j],a3[k]))
    return R

def recoupeur2(a1,a2,a3):
    R=[]
    for i in range(len(a1)):
        for j in range(len(a2)):
            for k in range(len(a3)):
                if a1[i][1]==a2[j][1]==a3[k][1]:
                    if a1[i][1:]==a2[j][1:] or a1[i][1:]==a3[k][1:] or a2[j][1:]==a3[k][1:]:
                        R.append((a1[i],a2[j],a3[k]))
    return R

recoupement = [((144, 190058, 2), (933, 190058, 6), (381, 190058, 4)), ((353, 123926, 5), (147, 123926, 2), (268, 123926, 4)), ((353, 123926, 5), (147, 123926, 2), (281, 123926, 4)), ((353, 123926, 5), (535, 123926, 3), (268, 123926, 4)), ((353, 123926, 5), (535, 123926, 3), (281, 123926, 4)), ((353, 123926, 5), (547, 123926, 2), (268, 123926, 4)), ((353, 123926, 5), (547, 123926, 2), (281, 123926, 4)), ((362, 123926, 5), (147, 123926, 2), (268, 123926, 4)), ((362, 123926, 5), (147, 123926, 2), (281, 123926, 4)), ((362, 123926, 5), (535, 123926, 3), (268, 123926, 4)), ((362, 123926, 5), (535, 123926, 3), (281, 123926, 4)), ((362, 123926, 5), (547, 123926, 2), (268, 123926, 4)), ((362, 123926, 5), (547, 123926, 2), (281, 123926, 4)), ((371, 58390, 3), (147, 58390, 2), (268, 58390, 4)), ((371, 58390, 3), (147, 58390, 2), (281, 58390, 4)), ((371, 58390, 3), (147, 58390, 2), (845, 58390, 6)), ((371, 58390, 3), (535, 58390, 3), (268, 58390, 4)), ((371, 58390, 3), (535, 58390, 3), (281, 58390, 4)), ((371, 58390, 3), (535, 58390, 3), (845, 58390, 6)), ((371, 58390, 3), (547, 58390, 2), (268, 58390, 4)), ((371, 58390, 3), (547, 58390, 2), (281, 58390, 4)), ((371, 58390, 3), (547, 58390, 2), (845, 58390, 6)), ((371, 189462, 3), (147, 189462, 2), (268, 189462, 4)), ((371, 189462, 3), (147, 189462, 2), (281, 189462, 4)), ((371, 189462, 3), (147, 189462, 2), (845, 189462, 6)), ((371, 189462, 3), (535, 189462, 3), (268, 189462, 4)), ((371, 189462, 3), (535, 189462, 3), (281, 189462, 4)), ((371, 189462, 3), (535, 189462, 3), (845, 189462, 6)), ((371, 189462, 3), (547, 189462, 2), (268, 189462, 4)), ((371, 189462, 3), (547, 189462, 2), (281, 189462, 4)), ((371, 189462, 3), (547, 189462, 2), (845, 189462, 6)), ((375, 58390, 3), (147, 58390, 2), (268, 58390, 4)), ((375, 58390, 3), (147, 58390, 2), (281, 58390, 4)), ((375, 58390, 3), (147, 58390, 2), (845, 58390, 6)), ((375, 58390, 3), (535, 58390, 3), (268, 58390, 4)), ((375, 58390, 3), (535, 58390, 3), (281, 58390, 4)), ((375, 58390, 3), (535, 58390, 3), (845, 58390, 6)), ((375, 58390, 3), (547, 58390, 2), (268, 58390, 4)), ((375, 58390, 3), (547, 58390, 2), (281, 58390, 4)), ((375, 58390, 3), (547, 58390, 2), (845, 58390, 6)), ((375, 189462, 3), (147, 189462, 2), (268, 189462, 4)), ((375, 189462, 3), (147, 189462, 2), (281, 189462, 4)), ((375, 189462, 3), (147, 189462, 2), (845, 189462, 6)), ((375, 189462, 3), (535, 189462, 3), (268, 189462, 4)), ((375, 189462, 3), (535, 189462, 3), (281, 189462, 4)), ((375, 189462, 3), (535, 189462, 3), (845, 189462, 6)), ((375, 189462, 3), (547, 189462, 2), (268, 189462, 4)), ((375, 189462, 3), (547, 189462, 2), (281, 189462, 4)), ((375, 189462, 3), (547, 189462, 2), (845, 189462, 6)), ((423, 123926, 5), (147, 123926, 2), (268, 123926, 4)), ((423, 123926, 5), (147, 123926, 2), (281, 123926, 4)), ((423, 123926, 5), (535, 123926, 3), (268, 123926, 4)), ((423, 123926, 5), (535, 123926, 3), (281, 123926, 4)), ((423, 123926, 5), (547, 123926, 2), (268, 123926, 4)), ((423, 123926, 5), (547, 123926, 2), (281, 123926, 4)), ((443, 123926, 6), (147, 123926, 2), (268, 123926, 4)), ((443, 123926, 6), (147, 123926, 2), (281, 123926, 4)), ((443, 123926, 6), (535, 123926, 3), (268, 123926, 4)), ((443, 123926, 6), (535, 123926, 3), (281, 123926, 4)), ((443, 123926, 6), (547, 123926, 2), (268, 123926, 4)), ((443, 123926, 6), (547, 123926, 2), (281, 123926, 4)), ((703, 123926, 3), (147, 123926, 2), (268, 123926, 4)), ((703, 123926, 3), (147, 123926, 2), (281, 123926, 4)), ((703, 123926, 3), (535, 123926, 3), (268, 123926, 4)), ((703, 123926, 3), (535, 123926, 3), (281, 123926, 4)), ((703, 123926, 3), (547, 123926, 2), (268, 123926, 4)), ((703, 123926, 3), (547, 123926, 2), (281, 123926, 4)), ((735, 123926, 5), (147, 123926, 2), (268, 123926, 4)), ((735, 123926, 5), (147, 123926, 2), (281, 123926, 4)), ((735, 123926, 5), (535, 123926, 3), (268, 123926, 4)), ((735, 123926, 5), (535, 123926, 3), (281, 123926, 4)), ((735, 123926, 5), (547, 123926, 2), (268, 123926, 4)), ((735, 123926, 5), (547, 123926, 2), (281, 123926, 4)), ((897, 58203, 4), (771, 58203, 4), (226, 58203, 5)), ((999, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((999, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((999, 58390, 4), (147, 58390, 2), (845, 58390, 6)), ((999, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((999, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((999, 58390, 4), (535, 58390, 3), (845, 58390, 6)), ((999, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((999, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((999, 58390, 4), (547, 58390, 2), (845, 58390, 6)), ((999, 58518, 4), (7, 58518, 5), (845, 58518, 6)), ((999, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((999, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((999, 189462, 4), (147, 189462, 2), (845, 189462, 6)), ((999, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((999, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((999, 189462, 4), (535, 189462, 3), (845, 189462, 6)), ((999, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((999, 189462, 4), (547, 189462, 2), (281, 189462, 4)), ((999, 189462, 4), (547, 189462, 2), (845, 189462, 6)), ((1008, 123926, 5), (147, 123926, 2), (268, 123926, 4)), ((1008, 123926, 5), (147, 123926, 2), (281, 123926, 4)), ((1008, 123926, 5), (535, 123926, 3), (268, 123926, 4)), ((1008, 123926, 5), (535, 123926, 3), (281, 123926, 4)), ((1008, 123926, 5), (547, 123926, 2), (268, 123926, 4)), ((1008, 123926, 5), (547, 123926, 2), (281, 123926, 4)), ((1011, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((1011, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((1011, 58390, 4), (147, 58390, 2), (845, 58390, 6)), ((1011, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((1011, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((1011, 58390, 4), (535, 58390, 3), (845, 58390, 6)), ((1011, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((1011, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((1011, 58390, 4), (547, 58390, 2), (845, 58390, 6)), ((1011, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((1011, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((1011, 189462, 4), (147, 189462, 2), (845, 189462, 6)), ((1011, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((1011, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((1011, 189462, 4), (535, 189462, 3), (845, 189462, 6)), ((1011, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((1011, 189462, 4), (547, 189462, 2), (281, 189462, 4)), ((1011, 189462, 4), (547, 189462, 2), (845, 189462, 6)), ((1015, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((1015, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((1015, 58390, 4), (147, 58390, 2), (845, 58390, 6)), ((1015, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((1015, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((1015, 58390, 4), (535, 58390, 3), (845, 58390, 6)), ((1015, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((1015, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((1015, 58390, 4), (547, 58390, 2), (845, 58390, 6)), ((1015, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((1015, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((1015, 189462, 4), (147, 189462, 2), (845, 189462, 6)), ((1015, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((1015, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((1015, 189462, 4), (535, 189462, 3), (845, 189462, 6)), ((1015, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((1015, 189462, 4), (547, 189462, 2), (281, 189462, 4)), ((1015, 189462, 4), (547, 189462, 2), (845, 189462, 6))] 

bestscenario = [((371, 58390, 3), (535, 58390, 3), (268, 58390, 4)), ((371, 58390, 3), (535, 58390, 3), (281, 58390, 4)), ((371, 58390, 3), (535, 58390, 3), (845, 58390, 6)), ((371, 189462, 3), (535, 189462, 3), (268, 189462, 4)), ((371, 189462, 3), (535, 189462, 3), (281, 189462, 4)), ((371, 189462, 3), (535, 189462, 3), (845, 189462, 6)), ((375, 58390, 3), (535, 58390, 3), (268, 58390, 4)), ((375, 58390, 3), (535, 58390, 3), (281, 58390, 4)), ((375, 58390, 3), (535, 58390, 3), (845, 58390, 6)), ((375, 189462, 3), (535, 189462, 3), (268, 189462, 4)), ((375, 189462, 3), (535, 189462, 3), (281, 189462, 4)), ((375, 189462, 3), (535, 189462, 3), (845, 189462, 6)), ((703, 123926, 3), (535, 123926, 3), (268, 123926, 4)), ((703, 123926, 3), (535, 123926, 3), (281, 123926, 4)), ((897, 58203, 4), (771, 58203, 4), (226, 58203, 5)), ((999, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((999, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((999, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((999, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((999, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((999, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((999, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((999, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((999, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((999, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((999, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((999, 189462, 4), (547, 189462, 2), (281, 189462, 4)), ((1011, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((1011, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((1011, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((1011, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((1011, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((1011, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((1011, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((1011, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((1011, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((1011, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((1011, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((1011, 189462, 4), (547, 189462, 2), (281, 189462, 4)), ((1015, 58390, 4), (147, 58390, 2), (268, 58390, 4)), ((1015, 58390, 4), (147, 58390, 2), (281, 58390, 4)), ((1015, 58390, 4), (535, 58390, 3), (268, 58390, 4)), ((1015, 58390, 4), (535, 58390, 3), (281, 58390, 4)), ((1015, 58390, 4), (547, 58390, 2), (268, 58390, 4)), ((1015, 58390, 4), (547, 58390, 2), (281, 58390, 4)), ((1015, 189462, 4), (147, 189462, 2), (268, 189462, 4)), ((1015, 189462, 4), (147, 189462, 2), (281, 189462, 4)), ((1015, 189462, 4), (535, 189462, 3), (268, 189462, 4)), ((1015, 189462, 4), (535, 189462, 3), (281, 189462, 4)), ((1015, 189462, 4), (547, 189462, 2), (268, 189462, 4)), ((1015, 189462, 4), (547, 189462, 2), (281, 189462, 4))] 

def surplus(liste):
    T=nsteps(board(E,liste[2][0]),liste[2][1],liste[2][2])
    l=len(T)-1
    c=len(T[0])-1
    s=0
    k=0
    while k<=c:
        s=s+T[0,k]
        k+=1
    while k<=c+l:
        s=s+T[k-c,c]
        k+=1
    while k<=c+l+c:
        s=s+T[l,c+l+c-k]
        k+=1
    while k<c+l+c+l:
        s=s+T[c+l+c+l-k,0]
        k+=1
    return((liste[2][0],liste[2][1],liste[2][2],s))

def classify(liste):
    T=[surplus(liste[i]) for i in range(len(liste))]
    L=[T[0]]
    for i in range(1,len(T)):
        j=0
        while j!=len(L) and T[i][3]<L[j][3] :
            j+=1
        L.insert(j,T[i])
    return(L)

best1 = ((897, 58203, 4), (771, 58203, 4), (226, 58203, 5))
